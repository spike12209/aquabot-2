!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AquaCmds	.\core\AquaCmds.cs	/^	public AquaCmds(Form host, Lane lane) {$/;"	m	class:AquaCmds
AquaCmds	.\core\AquaCmds.cs	/^class AquaCmds : Form {$/;"	c
Aquaforms	.\core\Aquaforms.cs	/^public class Aquaforms {$/;"	c
Aquatests	.\tests\Aquatests.cs	/^class Aquatests {$/;"	c
Assert	.\core\Interpreter.cs	/^	public Action<Form, string, object, Stack<Action>> Assert = $/;"	f	class:Interpreter
AttachTo	.\core\AquaCmds.cs	/^	public static void AttachTo(Form host, Lane lane) {$/;"	m	class:AquaCmds
BeginFrame	.\core\Aquaforms.cs	/^	static void BeginFrame(ValueStore values, Control input, Lane lane) {$/;"	m	class:Aquaforms	file:
CTRLH	.\core\AquaCmds.cs	/^		CTRLH   = 30,$/;"	f	class:AquaCmds	file:
CTRLOFF	.\core\AquaCmds.cs	/^		CTRLOFF = 10, \/\/<= Space between controls.$/;"	f	class:AquaCmds	file:
CTRLTOP	.\core\AquaCmds.cs	/^		CTRLTOP = 10;$/;"	f	class:AquaCmds	file:
CaptureFrame	.\core\Aquaforms.cs	/^	static void CaptureFrame(Form f, Control sender, ValueStore values, Lane lane) {$/;"	m	class:Aquaforms	file:
CaptureFrameOther	.\core\Aquaforms.cs	/^	static void CaptureFrameOther(Form f, ValueStore values, Lane lane) => $/;"	m	class:Aquaforms	file:
CaptureInput	.\core\Aquaforms.cs	/^	static void CaptureInput(Form f, Control c, ValueStore values, Lane lane) =>$/;"	m	class:Aquaforms	file:
CaptureOther	.\core\Aquaforms.cs	/^	static void CaptureOther(Form f, ValueStore values, Lane lane) {$/;"	m	class:Aquaforms	file:
CaptureSideEffectsRec	.\core\Aquaforms.cs	/^	static void CaptureSideEffectsRec(Control c, ValueStore values, Lane lane) {$/;"	m	class:Aquaforms	file:
Change	.\core\Interpreter.cs	/^	public Action<Form, object> Change = (target, newValue) => {$/;"	f	class:Interpreter
Change	.\core\MoveNode.cs	/^	public ChangeNode Change; \/\/ One move == One Change$/;"	f	class:MoveNode
ChangeNode	.\core\ChangeNode.cs	/^	public ChangeNode(string lbl = null, object val = null) $/;"	m	class:ChangeNode
ChangeNode	.\core\ChangeNode.cs	/^public class ChangeNode : Node {$/;"	c
CleanScript	.\core\Interpreter.cs	/^	static string CleanScript(string script) =>$/;"	m	class:Interpreter	file:
ConditionalHelpers	.\core\ConditionalHelpers.cs	/^class ConditionalHelpers {$/;"	c
CreateBtn	.\core\AquaCmds.cs	/^	static Button CreateBtn(string text, Action onClick, Control previous) {$/;"	m	class:AquaCmds	file:
CreateCtrls	.\app\Program.cs	/^	static void CreateCtrls(Form f) {$/;"	m	class:Program	file:
CreateScript	.\core\ChangeNode.cs	/^	public void CreateScript(StringWriter buffer) {$/;"	m	class:ChangeNode
CreateScript	.\core\Lane.cs	/^	public string CreateScript() {$/;"	m	class:Lane
CreateScript	.\core\MoveNode.cs	/^	public void CreateScript(StringWriter buffer) {$/;"	m	class:MoveNode
Ctrl	.\core\Value.cs	/^	public readonly Control Ctrl;$/;"	f	class:Value
Dispatch	.\core\Interpreter.cs	/^	void Dispatch(string line, Form target, Stack<Action> asserts) {$/;"	m	class:Interpreter	file:
DispatchCmd	.\core\Interpreter.cs	/^	void DispatchCmd(Form target, Stack<Action> asserts, string cmd, $/;"	m	class:Interpreter	file:
EndFrame	.\core\Aquaforms.cs	/^	static void EndFrame() {$/;"	m	class:Aquaforms	file:
Eval	.\core\Interpreter.cs	/^	public void Eval(string script, Form target) {$/;"	m	class:Interpreter
Fail	.\core\Interpreter.cs	/^	static void Fail(Control ctrl, object expected) {$/;"	m	class:Interpreter	file:
FindCtrl	.\core\Interpreter.cs	/^	static Control FindCtrl(Control target, string name) {$/;"	m	class:Interpreter	file:
FindCtrlOrDie	.\core\Interpreter.cs	/^	static Control FindCtrlOrDie(Form target, string name) {$/;"	m	class:Interpreter	file:
FirstMove	.\core\Lane.cs	/^		FirstMove,$/;"	f	class:Lane
FirstSideEffect	.\core\ChangeNode.cs	/^	public SideEffectNode FirstSideEffect;$/;"	f	class:ChangeNode
FirstSideEffect	.\core\MoveNode.cs	/^	public SideEffectNode FirstSideEffect;$/;"	f	class:MoveNode
FirstSnapshot	.\core\Aquaforms.cs	/^	static void FirstSnapshot(Control ctrl, ValueStore values) {$/;"	m	class:Aquaforms	file:
Focus	.\core\Interpreter.cs	/^	public Action<Form, string> Focus = (target, name) => {$/;"	f	class:Interpreter
FramesCount	.\core\ValueStore.cs	/^	public int FramesCount = 0;$/;"	f	class:ValueStore
Get	.\core\ValueStore.cs	/^	public string Get(Control ctrl) {$/;"	m	class:ValueStore
GetInitDir	.\core\AquaCmds.cs	/^	static string GetInitDir() => $/;"	m	class:AquaCmds	file:
GetLastMove	.\core\Lane.cs	/^	public MoveNode GetLastMove() =>$/;"	m	class:Lane
GetLastSideEffect	.\core\ChangeNode.cs	/^	public SideEffectNode GetLastSideEffect() =>$/;"	m	class:ChangeNode
GetLastSideEffect	.\core\MoveNode.cs	/^	public SideEffectNode GetLastSideEffect() =>$/;"	m	class:MoveNode
GetTop	.\app\Program.cs	/^	static int GetTop(Control last) {$/;"	m	class:Program	file:
HasChanged	.\core\Aquaforms.cs	/^	static bool HasChanged(Control c, ValueStore values) {$/;"	m	class:Aquaforms	file:
HookCtrls	.\core\Aquaforms.cs	/^	static void HookCtrls(Form f, Control ctrl, ValueStore values, Lane lane) {$/;"	m	class:Aquaforms	file:
HookCtrls	.\core\Aquaforms.cs	/^	static void HookCtrls(Form f, ValueStore values, Lane lane) =>$/;"	m	class:Aquaforms	file:
Init	.\core\Aquaforms.cs	/^	static ValueStore Init(Form f, Lane lane) {$/;"	m	class:Aquaforms	file:
InputName	.\core\Node.cs	/^	public string InputName, Notes;$/;"	f	class:Node
Interpreter	.\core\Interpreter.cs	/^public class Interpreter {$/;"	c
IsRecording	.\core\Lane.cs	/^	public bool IsRecording;$/;"	f	class:Lane
Lane	.\core\Lane.cs	/^public class Lane {$/;"	c
Lane	.\tests\Aquatests.cs	/^	static Lane Lane;$/;"	f	class:Aquatests	file:
Main	.\app\Program.cs	/^	static void Main(params string [] args) {$/;"	m	class:Program	file:
MakeChange	.\tests\Aquatests.cs	/^	static void MakeChange(ref MoveNode m, string lbl, object val) =>$/;"	m	class:Aquatests	file:
Move	.\core\Interpreter.cs	/^	public Action<Form, Stack<Action>> Move = (target, asserts) => {$/;"	f	class:Interpreter
MoveAt	.\core\Lane.cs	/^	public MoveNode MoveAt(int idx) {$/;"	m	class:Lane
MoveNode	.\core\MoveNode.cs	/^	public MoveNode(string inputName = null, object val = null) $/;"	m	class:MoveNode
MoveNode	.\core\MoveNode.cs	/^public class MoveNode : Node {$/;"	c
MoveTo	.\core\Lane.cs	/^	public MoveNode MoveTo(string inputName) {$/;"	m	class:Lane
MovesCount	.\core\Lane.cs	/^	public int MovesCount;$/;"	f	class:Lane
Next	.\core\SideEffectNode.cs	/^	public SideEffectNode Next;$/;"	f	class:SideEffectNode
Next	.\core\Value.cs	/^	public readonly Value Next;$/;"	f	class:Value
NextMove	.\core\Lane.cs	/^		NextMove;$/;"	f	class:Lane
NextMove	.\core\MoveNode.cs	/^	public MoveNode NextMove;$/;"	f	class:MoveNode
Node	.\core\Node.cs	/^	public Node() {}$/;"	m	class:Node
Node	.\core\Node.cs	/^	public Node(string inputName, object val) {$/;"	m	class:Node
Node	.\core\Node.cs	/^public class Node {$/;"	c
Notes	.\core\Node.cs	/^	public string InputName, Notes;$/;"	f	class:Node
OpenScript	.\core\AquaCmds.cs	/^	static string OpenScript() {$/;"	m	class:AquaCmds	file:
Pass	.\core\Interpreter.cs	/^	static void Pass(Control ctrl) {$/;"	m	class:Interpreter	file:
PrintChange	.\core\Aquaforms.cs	/^	static void PrintChange(Control ctrl, bool se = false) {$/;"	m	class:Aquaforms	file:
PrintSolidLine	.\core\Aquaforms.cs	/^	static void PrintSolidLine() => $/;"	m	class:Aquaforms	file:
Program	.\app\Program.cs	/^class Program {$/;"	c
RECORD	.\core\AquaCmds.cs	/^		RECORD    = "Record",$/;"	f	class:AquaCmds	file:
RECORDING	.\core\AquaCmds.cs	/^		RECORDING = "Recording",$/;"	f	class:AquaCmds	file:
REPLAY	.\core\AquaCmds.cs	/^		REPLAY    = "Replay";$/;"	f	class:AquaCmds	file:
RecordChange	.\core\MoveNode.cs	/^	public ChangeNode RecordChange(object val) {$/;"	m	class:MoveNode
RecordSide	.\core\ChangeNode.cs	/^	public SideEffectNode RecordSide(SideEffectNode se) {$/;"	m	class:ChangeNode
RecordSide	.\core\ChangeNode.cs	/^	public SideEffectNode RecordSide(string inputName, object val) =>$/;"	m	class:ChangeNode
RecordSide	.\core\MoveNode.cs	/^	public SideEffectNode RecordSide(SideEffectNode se) {$/;"	m	class:MoveNode
RecordSide	.\core\MoveNode.cs	/^	public SideEffectNode RecordSide(string inputName, object val) =>$/;"	m	class:MoveNode
Replay	.\core\AquaCmds.cs	/^	static void Replay (string script, Form host) {$/;"	m	class:AquaCmds	file:
Set	.\core\ValueStore.cs	/^	public void Set(Control ctrl, object val) {$/;"	m	class:ValueStore
SetPositionOnScreen	.\core\AquaCmds.cs	/^	void SetPositionOnScreen(Form host) {$/;"	m	class:AquaCmds	file:
SideAt	.\core\ChangeNode.cs	/^	public SideEffectNode SideAt(int idx) {$/;"	m	class:ChangeNode
SideAt	.\core\MoveNode.cs	/^	public SideEffectNode SideAt(int idx) {$/;"	m	class:MoveNode
SideCount	.\core\ChangeNode.cs	/^	public int SideCount;$/;"	f	class:ChangeNode
SideCount	.\core\MoveNode.cs	/^	public int SideCount;$/;"	f	class:MoveNode
SideEffectNode	.\core\SideEffectNode.cs	/^	public SideEffectNode(string inputName = null, object val = null) $/;"	m	class:SideEffectNode
SideEffectNode	.\core\SideEffectNode.cs	/^public class SideEffectNode : Node {$/;"	c
SumCtrlsWidth	.\core\AquaCmds.cs	/^	static int SumCtrlsWidth(Form f, int offset) {$/;"	m	class:AquaCmds	file:
TAB	.\core\Interpreter.cs	/^	const string TAB = "{TAB}";$/;"	f	class:Interpreter	file:
ToString	.\core\SideEffectNode.cs	/^	public override string  ToString() {$/;"	m	class:SideEffectNode
Unless	.\core\ConditionalHelpers.cs	/^	public static void Unless (bool cond, Action trueBr, Action falseBr = null) {$/;"	m	class:ConditionalHelpers
Update	.\core\ValueStore.cs	/^	public bool Update(Control ctrl, object val) {$/;"	m	class:ValueStore
UpdateValueStore	.\core\Aquaforms.cs	/^	static bool UpdateValueStore(Control ctrl, ValueStore values) => $/;"	m	class:Aquaforms	file:
Val	.\core\Value.cs	/^	public string Val;$/;"	f	class:Value
Value	.\core\Node.cs	/^	public object Value;$/;"	f	class:Node
Value	.\core\Value.cs	/^	public Value(Value next, Control ctrl, string val) {$/;"	m	class:Value
Value	.\core\Value.cs	/^class Value {$/;"	c
ValueStore	.\core\ValueStore.cs	/^class ValueStore {$/;"	c
Watch	.\core\Aquaforms.cs	/^	public static void Watch(Form f) {	$/;"	m	class:Aquaforms
_head	.\core\ValueStore.cs	/^	Value _head;$/;"	f	class:ValueStore	file:
before_each	.\tests\Aquatests.cs	/^	_ before_each = test =>$/;"	f	class:Aquatests	file:
create_replay_script	.\tests\Aquatests.cs	/^	_ create_replay_script = assert => {$/;"	f	class:Aquatests	file:
eval_script	.\tests\Aquatests.cs	/^	_ eval_script = assert => {$/;"	f	class:Aquatests	file:
record_change	.\tests\Aquatests.cs	/^	_ record_change = assert => {$/;"	f	class:Aquatests	file:
record_move	.\tests\Aquatests.cs	/^	_ record_move = assert => {$/;"	f	class:Aquatests	file:
record_multiple_moves	.\tests\Aquatests.cs	/^	_ record_multiple_moves = assert => {$/;"	f	class:Aquatests	file:
record_multiple_side_effects_RELATIVE_TO_MOVE	.\tests\Aquatests.cs	/^	_ record_multiple_side_effects_RELATIVE_TO_MOVE = assert => {$/;"	f	class:Aquatests	file:
record_multple_side_effects_RELATIVES_TO_CHANGE	.\tests\Aquatests.cs	/^	_ record_multple_side_effects_RELATIVES_TO_CHANGE = assert => {$/;"	f	class:Aquatests	file:
record_side_effect_RELATIVE_TO_CHANGE	.\tests\Aquatests.cs	/^	_ record_side_effect_RELATIVE_TO_CHANGE = assert => {$/;"	f	class:Aquatests	file:
record_side_effect_RELATIVE_TO_MOVE	.\tests\Aquatests.cs	/^	_ record_side_effect_RELATIVE_TO_MOVE = assert => {$/;"	f	class:Aquatests	file:
val	.\core\ValueStore.cs	/^	static string Str(object val) =>$/;"	f	class:ValueStore	file:
